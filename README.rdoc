= LetMeIn

This project rocks and uses MIT-LICENSE.


Delivered methods:

1) authentication
- login(user:, password:, permanent: false)
  Requires user-object and password.
  Uses `authenticate`, therefore `has_secure_password` must be included in user-model.
  Returns nil if authentication fails.
  Unless 'permanent' is passed, `session[:user_id]` is set.
  In case of 'permanent: true' `cookies.permanent.singed[:user_id]` is set and user remains logged in after browser being closed.

- logout
  Sets session[:user_id] and cookies[:user_id] to nil.

- current_user
  Returns @current_user

- logged_in?
  Returns true if current_user exists. Otherwise returns false.

2) password_reset
- set_password_reset_for(user:)
  It requires user-object and sets it's attribute `password_reset_token` (by calling Tokenizer).

- password_reset_valid?(password_reset_token:, expiration_time: 2.hours)
  It requires token. Expiration_time is an optional parameter.
  It checks wheather the token is not too old, based on expiration_time. Default is 2 hours.

- update_password_for(user:, password:, password_confirmation:, password_reset_token:)
  If the received token is identical with user's password_reset_token, it updates user's password_digest
  and sets password_reset_token to nil.

3) tokenizer
- LetMeIn::Tokenizer.generate_token
  It generates token.

- LetMeIn::Tokenizer.decode_time(token)
  It decode's the time of token generation from the token.
